// Code generated by "grpc-kit-cli/{{ .Global.ReleaseVersion }}". DO NOT EDIT.

package handler

import (
    "context"

    pb "{{ .Global.Repository }}/api/{{ .Global.ProductCode }}/{{ .Global.ShortName }}/{{ .Template.Service.APIVersion }}"
    "{{ .Global.Repository }}/internal/security"
    "{{ .Global.Repository }}/public"
    "google.golang.org/grpc/health"
    "google.golang.org/grpc/health/grpc_health_v1"
)

// Register 用于服务启动前环境准备
func (m *Microservice) Register(ctx context.Context) error {
    pb.Register{{ .Global.ServiceTitle }}Server(m.server.Server(), m)
    grpc_health_v1.RegisterHealthServer(m.server.Server(), health.NewServer())

    // 注册服务信息
    mux, err := m.baseCfg.Register(ctx, pb.Register{{ .Global.ServiceTitle }}HandlerFromEndpoint)
    if err != nil {
        return err
    }

	// 注册访问安全策略
	if err = m.baseCfg.SecurityPolicyLoad(ctx, security.Assets); err != nil {
		return err
	}

    // 注册前端托管静态数据
    if err = m.baseCfg.HTTPHandlerFrontend(mux, public.Assets); err != nil {
        return err
    }

    // 这里添加其他自定义实现
    if err := m.privateHTTPHandle(mux); err != nil {
        return err
    }

    // 注册HTTP网关
    if err := m.server.RegisterGateway(mux); err != nil {
        return err
    }

    // 开启gRPC与HTTP服务
    if err := m.server.StartBackground(); err != nil {
        return err
    }

    return nil
}

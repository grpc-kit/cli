// Code generated by "grpc-kit-cli/{{ .Global.ReleaseVersion }}". DO NOT EDIT.

package main

import (
    "context"
    "fmt"
    "os"

    "github.com/grpc-kit/pkg/cfg"
    "github.com/grpc-kit/pkg/signal"
    "github.com/grpc-kit/pkg/vars"
    flag "github.com/spf13/pflag"
    "github.com/spf13/viper"

    "{{ .Global.Repository }}/handler"
)

var (
    flagCfgFile *string
    flagVersion *bool
)

func init() {
    flagCfgFile = flag.StringP("config", "c", "./config/app.yaml", "config file")
    flagVersion = flag.BoolP("version", "v", false, "print version and exit")
    flag.Parse()

    if *flagVersion {
        fmt.Println(vars.GetVersion())
        os.Exit(0)
    }
}

func main() {
    viper.SetConfigFile(*flagCfgFile)

    if err := viper.ReadInConfig(); err == nil {
        fmt.Printf("Using config file: %v\n", *flagCfgFile)
    } else {
        fmt.Printf("Load config file: %v, err: %v\n", *flagCfgFile, err)
        os.Exit(1)
    }

    ctx := context.Background()

    m, err := startServer(ctx)
    if err != nil {
        fmt.Printf("Start server err: %v\n", err)
        os.Exit(1)
    }

    signal.WaitQuit()

    if err := m.Shutdown(ctx); err != nil {
        fmt.Printf("Shutdown server err: %v\n", err)
        os.Exit(1)
    }
}

func startServer(ctx context.Context) (*handler.Microservice, error) {
    lc, err := cfg.New(viper.GetViper())
    if err != nil {
        return nil, err
    }

    m, err := handler.NewMicroservice(lc)
    if err != nil {
        return nil, err
    }

    if err := m.Register(ctx); err != nil {
        return nil, err
    }

    return m, nil
}

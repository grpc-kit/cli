syntax = "proto3";

package {{ .Global.ProtoPackage }};

option go_package = "{{ .Global.Repository }}/api/{{ .Global.ProductCode }}/{{ .Global.ShortName }}/{{ .Template.Service.APIVersion }};{{ .Global.ShortName }}{{ .Template.Service.APIVersion }}";

// 同服务内的 proto 文件使用相对路径引用，既不包含代码仓库前缀
import "api/{{ .Global.ProductCode }}/{{ .Global.ShortName }}/{{ .Template.Service.APIVersion }}/demo.proto";

// 引入依赖的外部 proto 文件
import "github.com/grpc-kit/api/known/status/v1/response.proto";

// 该微服务支持的 RPC 方法定义
service {{ title .Global.ServiceTitle }} {
  rpc HealthCheck(grpc_kit.api.known.status.v1.HealthCheckRequest) returns (grpc_kit.api.known.status.v1.HealthCheckResponse) {}
  rpc Demo(DemoRequest) returns (DemoResponse) {}
}

// Copyright © 2020 The gRPC Kit Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package service

import (
	"fmt"
)

func (t *templateService) fileDirectoryApi() {
	t.files = append(t.files, &templateFile{
		name: fmt.Sprintf("api/%v/%v/%v/microservice.proto",
			t.config.Global.ProductCode,
			t.config.Global.ShortName,
			t.config.Template.Service.APIVersion),
		parse: true,
		body: `
syntax = "proto3";

package {{ .Global.ProductCode }}.{{ .Global.ShortName }}.{{ .Template.Service.APIVersion }};

// 引入依赖的外部proto文件
import "github.com/grpc-kit/api/known/status/v1/response.proto";
import "github.com/googleapis/googleapis/google/api/annotations.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-openapiv2/options/annotations.proto";

// 同组RPC方法对应一个proto文件，以该组RPC名称的小写字母为文件名
import "{{ .Global.Repository }}/api/{{ .Global.ProductCode }}/{{ .Global.ShortName }}/{{ .Template.Service.APIVersion }}/demo.proto";

// 转换为 openapi v2 版本接口文档的相关设置
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  swagger: "2.0",
  info: {
    title: "{{ .Global.ShortName }}.{{ .Template.Service.APIVersion }}.{{ .Global.ProductCode }}",
    contact: {
      name: "{{ .Global.ShortName }}.{{ .Template.Service.APIVersion }}.{{ .Global.ProductCode }}",
      url: "http://{{ .Global.ShortName }}.{{ .Template.Service.APIVersion }}.{{ .Global.ProductCode }}.{{ .Global.APIEndpoint }}"
    },
    license:{
      name: "Apache License 2.0",
      url: "https://github.com/grpc-kit/cli/blob/main/LICENSE"
    }
    version: "0.0.0",
  },
  host: "{{ .Global.ShortName }}.{{ .Template.Service.APIVersion }}.{{ .Global.ProductCode }}.{{ .Global.APIEndpoint }}",
  base_path: "/",
  schemes: HTTP,
  consumes: "application/json",
  produces: "application/json",
  security_definitions: {
    security: {
      key: "BasicAuth",
      value: {
        type: TYPE_BASIC
      }
    },
    security: {
      key: "ApiKeyAuth",
      value: {
        type: TYPE_API_KEY,
        in: IN_HEADER,
        name: "Authorization: Bearer <token>"
      }
    }
  },
  security: {
    security_requirement: {
      key: "BasicAuth",
      value: {}
    },
    security_requirement: {
      key: "ApiKeyAuth",
      value: {}
    }
  },  
  responses: {
    key: "4xx",
    value: {
      description: "客户端错误响应体"
      schema: {
        json_schema: {ref: ".grpc_kit.api.known.status.v1.ErrorResponse"}
      }
    }
  },
  responses: {
    key: "5xx",
    value: {
      description: "服务端错误响应体"
      schema: {
        json_schema: {ref: ".grpc_kit.api.known.status.v1.ErrorResponse"}
      }
    }
  },
  external_docs: {
    description: 'Code generated by "grpc-kit-cli/{{ .Global.ReleaseVersion }}"',
    url: "https://grpc-kit.com"
  }
};

// 该微服务支持的 RPC 方法定义
service {{ title .Global.ProductCode }}{{ title .Global.ShortName }} {
  rpc HealthCheck(grpc_kit.api.known.status.v1.HealthCheckRequest) returns (grpc_kit.api.known.status.v1.HealthCheckResponse) {
    option (google.api.http) = {
      get: "/healthz"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "internal"
      summary: "健康检测"
      description: '请务删除！\n 接口格式：/healthz?service={{ .Global.ShortName }}.{{ .Template.Service.APIVersion }}.{{ .Global.ProductCode }}\n 请求成功访问状态码200，且内容为：{"status": "SERVING"}'
      responses: {
        key: "200",
        value: {
          description: "正常响应体",
          schema: {
            json_schema: {
              example: '{"status": "SERVING"}'
            }
          }
        }
      }
    };
  };

  rpc Demo(DemoRequest) returns (DemoResponse) {
    option (google.api.http) = {
      post: "/api/demo"
      body: "*"
      response_body: "pong"
      additional_bindings {
        get: "/api/demo"
        response_body: "content"
      }
      additional_bindings {
        get: "/api/demo/{uuid}"
        response_body: "pong.pong"
      }
      additional_bindings {
        put: "/api/demo/{uuid}"
        body: "ping"
        response_body: "ping"
      }
      additional_bindings {
        delete: "/api/demo/{uuid}"
        response_body: "empty"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "demo",
      summary: "示例 RESTful/RPC 接口",
      description: "这里做一些较长的使用描述\n 1. POST 用于创建资源，非幂等\n 2. GET 用于获取资源，幂等\n 3. PUT 用于更新资源，幂等\n 4. DELETE 用于删除资源，幂等",
      deprecated: false,
      responses: {
        key: "204",
        value: {
          description: "no content"
        }
      }
    };
  }
}
`,
	})

	t.files = append(t.files, &templateFile{
		name: fmt.Sprintf("api/%v/%v/%v/demo.proto",
			t.config.Global.ProductCode,
			t.config.Global.ShortName,
			t.config.Template.Service.APIVersion),
		parse: true,
		body: `
syntax = "proto3";

// 根据具体的微服务名称做更改
package {{ .Global.ProductCode }}.{{ .Global.ShortName }}.{{ .Template.Service.APIVersion }};

// 引入google公共类型
import "google/protobuf/empty.proto";

// 引入第三方依赖的proto文件
import "github.com/grpc-kit/api/known/example/v1/example.proto";
import "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-openapiv2/options/annotations.proto";

// DemoRequest Demo方法请求可使用的接口参数
message DemoRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    example: { value: '{ "ping": { "name": "grpc-kit" } }' }
  };

  // UUID 资源编号
  string uuid = 1;

  // Ping 资源内容
  grpc_kit.api.known.example.v1.ExampleRequest ping = 2;
}

// DemoResponse Demo方法响应的具体内容
message DemoResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    example: { value: '{"uuid":"99feafb5-bed6-4daf-927a-69a2ab80c485", "pong": { "name": "grpc-kit" } }' }
  };

  message Pong {
    // UUID 资源编号
    string uuid = 1;

    // Pong 单个资源响应内容
    grpc_kit.api.known.example.v1.ExampleResponse pong = 2;
  }

  // Pong 返回创建的资源
  Pong pong = 1;

  // Content 多个资源响应内容（无分页属性）
  repeated grpc_kit.api.known.example.v1.ExampleResponse content = 2;

  // Ping 返回更新的资源
  grpc_kit.api.known.example.v1.ExampleResponse ping = 3;

  // Empty 返回空的内容
  google.protobuf.Empty empty = 4;
}
`,
	})
}
